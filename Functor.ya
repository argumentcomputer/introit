package Functor
  import List

where

def Functor (F: ∀ Type -> Type) : Type =
  @self ∀
  (0 P: ∀ (Functor F) -> Type)
  (& new: ∀
    (map: ∀ (A : Type) (B: Type) (fun: ∀ A -> B) (f: F A) -> F B)
    -> P (data λ P n => n map)
  ) -> P self

def new (0 F: ∀ Type -> Type) (map: ∀ (A : Type) (B: Type) (fun: ∀ A -> B) (F A) -> F B)
        : Functor F
  = data λ P n => n map

def map (0 F: ∀ Type -> Type) (impl : Functor F) (A : Type) (B : Type) (fun : ∀ A -> B) (f : F A): F B =
  (case impl) (λ _ => F B)
    (λ m => m A B fun f)

def functor : Functor List
 = Functor.new List map
