package b_tree where

type BTree (A: Type) {
  Leaf,
  Node A (BTree A) (BTree A),
}

//def fromList (A : Type) (ordering : Ordered A) (list : List A): BinaryTree A
//  = (case list) (位 _ => BinaryTree A)
//        (empty A)
//        (位 head tail =>
//            (case tail) (位 _ => BinaryTree A)
//                (leaf A head)
//                (位 next _ => if (BinaryTree A) (isLessThanOrEqual A ordering head next)
//                    (node A head (fromList A ordering tail) (empty A))
//                    (node A head (empty A) (fromList A ordering tail))
//                )
//        )
