package Monad
where

def Monad (M: forall Type -> Type) : Type =
  @self forall
  (P: forall (Monad M) -> Type)
  (new: forall
    (bind: forall (A : Type) (B: Type) (M A) (fun: forall A -> (M B)) -> M B)
    (pure: forall (A : Type) (a: A) -> M A)
    -> P (data \P n => n bind pure)
  ) -> P self

