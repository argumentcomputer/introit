//package Applicative where
//
//open Functor (Functor)
//open Functor as Functor
//
//// An applicative functor
//def Applicative (F: ∀ Type -> Type) : Type =
//  @self ∀
//  (0 P: ∀ (Applicative F) -> Type)
//  (& new: ∀
//    (functor : Functor F)
//    (pure : ∀ (A : Type) (a : A) -> F A)
//    (applicate : ∀ (A B : Type) (p : F (∀ A -> B)) (q : F A) -> F B)
//    -> P (data λ P n => n functor pure applicate)
//  ) -> P self
//
//def new (0 F: ∀ Type -> Type)
//        (functor : Functor F)
//        (pure : ∀ (A : Type) (a : A) -> F A)
//        (applicate : ∀ (A B : Type) (p : F (∀ A -> B)) (q : F A) -> F B)
//        : Applicative F
//  = data λ P n => n functor pure applicate
//
//def functor (0 F: ∀ Type -> Type) (impl : Applicative F): Functor F
//  = (case impl) (λ _ => Functor F)
//      (λ functorF _ _ => functorF)
//
//def pure (F : ∀ Type -> Type) (impl : Applicative F) (A : Type) (a : A): F A =
//  (case impl) (λ _ => F A)
//    (λ _ pureF _ => pureF A a)
//
//def applicate (F : ∀ Type -> Type) (impl : Applicative F) (A B : Type)
//              (p : F (∀ A -> B)) (q : F A): F B =
//  (case impl) (λ _ => F B)
//    (λ _ _ applicateF => applicateF A B p q)
