package U8
  import Bool (Bool)
  import Bool as Bool
  import Is (Is)
  import Is as Is
  import Pair (Pair)
  import Pair as Pair
  import Maybe (Maybe)
  import Maybe as Maybe
  import U32 (U32)
where

def U8: Type = #U8

def MAX: U8 = #U8.max
def MIN: U8 = #U8.min

def eql: ∀ (x y: U8) -> Bool = #U8.eql
def lte: ∀ (x y: U8) -> Bool = #U8.lte
def lth: ∀ (x y: U8) -> Bool = #U8.lth
def gte: ∀ (x y: U8) -> Bool = #U8.gte
def gth: ∀ (x y: U8) -> Bool = #U8.gth
def and: ∀ (x y: U8) -> Bool = #U8.and
def xor: ∀ (x y: U8) -> Bool = #U8.xor
def or: ∀ (x y: U8) -> Bool = #U8.or
def neq (x y: U8): Bool = Bool.not (eql x y)

def add: ∀ (x y: U8) -> U8 = #U8.add
def addSafe (x y: U8) (0 e: Is (gte (#U8.add x y) x)): U8 = #U8.add x y

def sub: ∀ (x y: U8) -> U8 = #U8.sub
def subSafe (x y: U8) (0 e: Is (lte y x)): U8 = #U8.sub x y

def mul: ∀ (x y: U8) -> U8 = #U8.mul

def SafeMul (x y: U8): Bool =
  (case (eql x 0u8)) (λ _ => Bool)
    Bool.true
    (eql (#U8.div (#U8.mul x y) x) y)

def mulSafe (x y: U8) (0 e: Is (SafeMul x y)): U8 = #U8.mul x y

def div (x y: U8): Maybe U8 =
  (case (neq y 0u8)) (λ _ => Maybe U8)
    (Maybe.some U8 (#U8.div x y))
    (Maybe.none U8)

def divSafe (x y: U8) (0 e: Is (neq y 0)): U8 = #U8.div x y

def mod (x y: U8): Maybe U8 =
  (case (neq y 0u8)) (λ _ => Maybe U8)
    (Maybe.some U8 (#U8.mod x y))
    (Maybe.none U8)

def modSafe (x y: U8) (0 e: Is (neq y 0)): U8 = #U8.mod x y

def pow: ∀ (x: U8) (y: U32) -> U8 = #U8.pow
def shl: ∀ (x: U32) (y: U8) -> U8 = #U8.shl
def shr: ∀ (x: U32) (y: U8) -> U8 = #U8.shr
def rol: ∀ (x: U32) (y: U8) -> U8 = #U8.rol
def ror: ∀ (x: U32) (y: U8) -> U8 = #U8.ror

def countZeros: ∀ (x: U8) -> U32 = #U8.count_zeros
def countOnes: ∀ (x: U8) -> U32 = #U8.count_ones

def toU16: ∀ (x: U8) -> #U16 = #U8.to_U16
def toU32: ∀ (x: U8) -> #U32 = #U8.to_U32
def toU64: ∀ (x: U8) -> #U64 = #U8.to_U64

def toI8 (x: U8): Maybe #I8 =
  (case (lte x (#I8.to_U8 #I8.max))) (λ _ => Maybe #I8)
    (Maybe.some #I8 (#U8.to_I8 x))
    (Maybe.none #I8)

def toI8Safe (x: U8) (0 e: Is (lte x (#I8.to_U8 #I8.max))): #I8
  = #U8.to_I8 x

def toI16: ∀ (x: U8) -> #I16 = #U8.to_I16
def toI32: ∀ (x: U8) -> #I32 = #U8.to_I32
def toI64: ∀ (x: U8) -> #I64 = #U8.to_I64
