// Basic Matrix functions
package matrix
  import natural
  import vector
where

type Matrix (A: Type): ∀ (ω rows: Natural) (ω cols: Natural) -> Type {
  New
    (rows: Natural) (cols: Natural) (vec: (Vector (Vector A cols) rows))
    : Matrix A rows cols
}

//def fill (0 A: Type) (rows: Nat) (cols : Nat) (a: A) : Matrix A rows cols =
//    new A rows cols (Vector.fill (Vector A cols) rows (Vector.fill A cols a))
//
//def getRows (0 A: Type) (rows: Nat) (cols: Nat) (matrix: Matrix A rows cols): Vector (Vector A cols) rows
//  = (case matrix) (λ r c m => Vector (Vector A c) r)
//        (λ r c vec => vec)
//
//def vec_vec_addable (0 A: Type) (impl: Addable A) (rows: Nat) (cols : Nat): Addable (Vector (Vector A cols) rows)
//  = Vector.deriveAddable (Vector A cols) (Vector.deriveAddable A impl cols) rows
//
//def add (0 A: Type) (impl: Addable A) (rows: Nat) (cols : Nat) (x y : Matrix A rows cols): Matrix A rows cols
//  = new A rows cols (Vector.add (Vector A cols) (Vector.deriveAddable A impl cols) rows (getRows A rows cols x) (getRows A rows cols y))
//
//def deriveAddable (0 A: Type) (impl: Addable A) (rows: Nat) (cols : Nat): Addable (Matrix A rows cols)
//  = Nat.newAddable (Matrix A rows cols) (add A impl rows cols)
