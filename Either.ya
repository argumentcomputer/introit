package Either where


def Either (A B: Type): Type =
  @self ∀
  (P: ∀ (Either A B) -> Type)
  (& left:  ∀ (a: A) -> P (data λ P l r => l a))
  (& right: ∀ (b: B) -> P (data λ P l r => r b))
  -> P self

def left  (A B: Type) (a: A): Either A B = data λ P l r => l a
def right (A B: Type) (b: B): Either A B = data λ P l r => r b

def bindRight (A B C: Type) (e: Either A B) (f: ∀ B -> (Either A C)): Either A C
  = (case e) (λ m => Either A C) (left A C) f

def bindLeft (A B C: Type) (e: Either A B) (f: ∀ A -> (Either C B)): Either C B
  = (case e) (λ m => Either C B) f (right C B)

