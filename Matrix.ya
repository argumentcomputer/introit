{| Basic Matrix functions
|}
package Matrix
  with Nat
  with Vector as Vector
  with Vector (Vector, nil, cons)
where

def Matrix (A: Type) (rows: Nat) (cols: Nat): Type =
  @self ∀
  (P : ∀ (rows: Nat) -> ∀ (cols: Nat) -> ∀ (Matrix A rows cols) -> Type)
  (new: ∀ (rows: Nat) -> ∀  (cols: Nat) -> ∀  (vec: (Vector (Vector A cols) rows)) -> P rows cols (data λ P n => n rows cols vec))
  -> P rows cols self

def new (A: Type) (rows: Nat) (cols: Nat) (vec: (Vector (Vector A cols) rows)): Matrix A rows cols
  = data λ P n => n rows cols vec

def fill (A: Type) (a: A) (rows: Nat) (cols : Nat): Matrix A rows cols =
    letrec row: Vector A cols = Vector.fill A cols a;
    letrec rows_vec : Vector (Vector A cols) rows = Vector.fill A rows row;
    new A rows cols rows_vec
