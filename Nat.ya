package Nat
  import Bool as Bool
  import Bool (Bool)
  import Is as Is
  import Is (Is)
  import Maybe as Maybe
  import Maybe (Maybe)
  import Ord as Ord
where

def Nat: Type = #Nat

def zero: Nat = 0
def succ: ∀ Nat -> Nat = #Nat.suc

def pred: ∀ Nat -> Nat = #Nat.pre
def eql: ∀ (x y: Nat) -> Bool = #Nat.eql
def lte: ∀ (x y: Nat) -> Bool = #Nat.lte
def lth: ∀ (x y: Nat) -> Bool = #Nat.lth
def gte: ∀ (x y: Nat) -> Bool = #Nat.gte
def gth: ∀ (x y: Nat) -> Bool = #Nat.gth

def add: ∀ (x y: Nat) -> Nat = #Nat.add
def mul: ∀ (x y: Nat) -> Nat = #Nat.mul

def neq (x y: Nat): Bool = Bool.not (eql x y)

def div (x y: Nat) (0 e: Is (neq y 0)): Nat = #Nat.div x y

def divChecked (x y: Nat): Maybe Nat =
  (case y) (λ _ => Maybe Nat)
    (Maybe.none Nat)
    (λ _ => Maybe.some Nat (#Nat.div x y))

def mod (x y: Nat) (0 e: Is (neq y 0)): Nat = #Nat.mod x y

def modChecked (x y: Nat): Maybe Nat =
  (case y) (λ _ => Maybe Nat)
    (Maybe.none Nat)
    (λ _ => Maybe.some Nat (#Nat.mod x y))

def cmp (x y: Nat): Ord.Ordering =
  (case (lth x y)) (λ _ => Ord.Ordering)
    Ord.lt
    ((case (eql x y)) (λ _ => Ord.Ordering) Ord.eq Ord.gt)
