package U64
  import Bool (Bool)
  import Bool as Bool
  import Is (Is)
  import Is as Is
  import Pair (Pair)
  import Pair as Pair
  import Maybe (Maybe)
  import Maybe as Maybe
  import U32 (U32)
where

def U64: Type = #U64

def MAX: U64 = #U64.max
def MIN: U64 = #U64.min

def eql: ∀ (x y: U64) -> Bool = #U64.eql
def lte: ∀ (x y: U64) -> Bool = #U64.lte
def lth: ∀ (x y: U64) -> Bool = #U64.lth
def gte: ∀ (x y: U64) -> Bool = #U64.gte
def gth: ∀ (x y: U64) -> Bool = #U64.gth
def and: ∀ (x y: U64) -> Bool = #U64.and
def xor: ∀ (x y: U64) -> Bool = #U64.xor
def or: ∀ (x y: U64) -> Bool = #U64.or
def neq (x y: U64): Bool = Bool.not (eql x y)

def add: ∀ (x y: U64) -> U64 = #U64.add
def addSafe (x y: U64) (0 e: Is (gte (#U64.add x y) x)): U64 = #U64.add x y

def sub: ∀ (x y: U64) -> U64 = #U64.sub
def subSafe (x y: U64) (0 e: Is (lte y x)): U64 = #U64.sub x y

def mul: ∀ (x y: U64) -> U64 = #U64.mul

def SafeMul (x y: U64): Bool =
  (case (eql x 0u64)) (λ _ => Bool)
    Bool.true
    (eql (#U64.div (#U64.mul x y) x) y)

def mulSafe (x y: U64) (0 e: Is (SafeMul x y)): U64 = #U64.mul x y

def div (x y: U64): Maybe U64 =
  (case (neq y 0u64)) (λ _ => Maybe U64)
    (Maybe.some U64 (#U64.div x y))
    (Maybe.none U64)

def divSafe (x y: U64) (0 e: Is (neq y 0)): U64 = #U64.div x y

def mod (x y: U64): Maybe U64 =
  (case (neq y 0u64)) (λ _ => Maybe U64)
    (Maybe.some U64 (#U64.mod x y))
    (Maybe.none U64)

def modSafe (x y: U64) (0 e: Is (neq y 0)): U64 = #U64.mod x y

def pow: ∀ (x: U64) (y: U32) -> U64 = #U64.pow
def shl: ∀ (x: U32) (y: U64) -> U64 = #U64.shl
def shr: ∀ (x: U32) (y: U64) -> U64 = #U64.shr
def rol: ∀ (x: U32) (y: U64) -> U64 = #U64.rol
def ror: ∀ (x: U32) (y: U64) -> U64 = #U64.ror

def countZeros: ∀ (x: U64) -> U32 = #U64.count_zeros
def countOnes: ∀ (x: U64) -> U32 = #U64.count_ones

def toU8 (x: U64): Maybe #U8 =
  (case (lte x (#U8.to_U64 #U8.max))) (λ _ => Maybe #U8)
    (Maybe.some #U8 (#U64.to_U8 x))
    (Maybe.none #U8)

def toU8Safe (x: U64) (0 e: Is (lte x (#U8.to_U64 #U8.max))): #U8
  = #U64.to_U8 x

def toU16 (x: U64): Maybe #U16 =
  (case (lte x (#U16.to_U64 #U16.max))) (λ _ => Maybe #U16)
    (Maybe.some #U16 (#U64.to_U16 x))
    (Maybe.none #U16)

def toU16Safe (x: U64) (0 e: Is (lte x (#U16.to_U64 #U16.max))): #U16
  = #U64.to_U16 x

def toU32 (x: U64): Maybe #U32 =
  (case (lte x (#U32.to_U64 #U32.max))) (λ _ => Maybe #U32)
    (Maybe.some #U32 (#U64.to_U32 x))
    (Maybe.none #U32)

def toU32Safe (x: U64) (0 e: Is (lte x (#U32.to_U64 #U32.max))): #U32
  = #U64.to_U32 x

def toI8 (x: U64): Maybe #I8 =
  (case (lte x (#I8.to_U64 #I8.max))) (λ _ => Maybe #I8)
    (Maybe.some #I8 (#U64.to_I8 x))
    (Maybe.none #I8)

def toI8Safe (x: U64) (0 e: Is (lte x (#I8.to_U64 #I8.max))): #I8
  = #U64.to_I8 x

def toI16 (x: U64): Maybe #I16 =
  (case (lte x (#I16.to_U64 #I16.max))) (λ _ => Maybe #I16)
    (Maybe.some #I16 (#U64.to_I16 x))
    (Maybe.none #I16)

def toI16Safe (x: U32) (0 e: Is (lte x (#I16.to_U32 #I16.max))): #I16
  = #U32.to_I16 x

def toI32 (x: U64): Maybe #I32 =
  (case (lte x (#I32.to_U64 #I32.max))) (λ _ => Maybe #I32)
    (Maybe.some #I32 (#U64.to_I32 x))
    (Maybe.none #I32)

def toI32Safe (x: U64) (0 e: Is (lte x (#I32.to_U64 #I32.max))): #I32
  = #U64.to_I32 x

def toI64 (x: U64): Maybe #I64 =
  (case (lte x (#I64.to_U64 #I64.max))) (λ _ => Maybe #I64)
    (Maybe.some #I64 (#U64.to_I64 x))
    (Maybe.none #I64)

def toI64Safe (x: U64) (0 e: Is (lte x (#I64.to_U64 #I64.max))): #I64
  = #U64.to_I64 x

def toNat: ∀ (x: U64) -> #Nat = #U64.to_Nat
def toInt: ∀ (x: U64) -> #Int = #U64.to_Int
