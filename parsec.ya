// This package is an adaptation of the Haskell Megaparsec library found at
// https://hackage.haskell.org/package/megaparsec
package parsec
  import unit
  import bool
  import list
  import maybe
  import char
  import text
  import nat
  import either
  import parsec.error
  import parsec.state
  import parsec.reply
where

// A parser is a continuation:
// For custom State type S, custom Error type E, and return type A,
// For all possible continuation types B (i.e. all possible parser compositions)
// We take a Parsec.State with custom state and errors
// and run one of four possible continuation functions on it
// - (eok) processes a state and a  value when no input was consumed
// - (eer) processes a state and an error when no input was consumed
// - (cok) processes a state and a  value when input was consumed
// - (cer) processes a state and an error when input was consumed
def Parsec (S E A: Type): Type =
  ∀ (B: Type)
    (state: State S E)
    (∀ (State S E) A -> B)
    (∀ (State S E) (Error E) -> B)
    (∀ (State S E) A -> B)
    (∀ (State S E) (Error E) -> B)
  -> B

def Parsec.run (S E A: Type) (parser: Parsec S E A) (state: State S E): Reply S E A
  = parser (Reply S E A) state
    (Reply.EOK S E A)
    (Reply.EER S E A)
    (Reply.COK S E A)
    (Reply.CER S E A)

def Parsec.parse (S E A: Type) (parser: Parsec S E A) (state: State S E)
  : Either (Error E) A
  = Reply.toEither S E A (Parsec.run S E A parser state)

def Parsec.Parsed (S E A: Type) (reply: Reply S E A): Type =
  (case reply) (λ _ => Type)
  (λ _ _ => A)
  (λ _ _ => Error E)
  (λ _ _ => A)
  (λ _ _ => Error E)

def Parsec.parsed (S E A: Type) (parser: Parsec S E A) (state: State S E)
  : Parsec.Parsed S E A (Parsec.run S E A parser state)
  = (case (Parsec.run S E A parser state)) (λ reply => Parsec.Parsed S E A reply)
    (λ _ x => x)
    (λ _ e => e)
    (λ _ x => x)
    (λ _ e => e)

def Parsec.pure (S E A: Type) (a: A): Parsec S E A = λ _ s eok _ _ _ => eok s a

def Parsec.map (S E A B: Type) (f: ∀ A -> B) (p: Parsec S E A): Parsec S E B =
  λ B s1 eok eer cok cer => p B s1
   (λ s2 a => eok s2 (f a))
   eer
   (λ s2 a => cok s2 (f a))
   cer

def Parsec.bind (S E A B: Type) (p: Parsec S E A) (f: ∀ A -> Parsec S E B)
  : Parsec S E B
  = λ B s1 eok eer cok cer => p B s1
    (λ s2 a => f a B s2 (λ s3 b => eok s3 b) eer (λ s3 b => cok s3 b) cer)
    eer
    (λ s2 a => f a B s2 (λ s3 b => cok s3 b) cer (λ s3 b => cok s3 b) cer)
    cer

def Parsec.ap (S E A B: Type) (pf: Parsec S E (∀ A -> B)) (pa: Parsec S E A)
  : Parsec S E B
  = λ B s1 eok eer cok cer => pf B s1
  (λ s2 f => pa B s2 (λ s3 a => eok s3 (f a)) eer (λ s3 a => cok s3 (f a)) cer)
  eer
  (λ s2 f => pa B s2 (λ s3 a => cok s3 (f a)) cer (λ s3 a => cok s3 (f a)) cer)
  cer

def Parsec.state (S E: Type): Parsec S E (State S E) =
  λ B s1 eok eer cok cer => eok s1 s1

def Parsec.token (S E A: Type) (f: ∀ Char -> Maybe A) (exps: List Item): Parsec S E A
  = λ B s1 eok eer cok cer =>
  (case s1) (λ _ => B) (λ pos txt err ste =>
    (case txt) (λ _ => B)
      (eer s1 (Error.Trivial E pos (Maybe.Some Item Item.Eof) exps))
      (λ c cs => (case (f c)) (λ _ => B)
        (eer s1
          (Error.Trivial E pos
            (Maybe.Some Item (Item.Tokens (Text.single c)))
            exps
          )
        )
        (λ x => cok (State.New S E (Nat.S pos) cs err ste) x)
      )
  )

def Parsec.char (S E: Type) (c: Char): Parsec S E Char =
  Parsec.token S E Char
    (λ x => (case (Char.eql x c)) (λ _ => Maybe Char)
      (Maybe.Some Char c)
      (Maybe.None Char)
    )
    (List.single Item (Item.Tokens (Text.single c)))

def Parsec.anyChar (S E: Type): Parsec S E Char =
  Parsec.token S E Char (Maybe.Some Char) (List.single Item (Item.Label "any char"))

def Parsec.zero (S E A: Type): Parsec S E A = λ B s1 eok eer cok cer =>
  (case s1) (λ _ => B) (λ pos _ _ _ =>
    eer s1 (Error.Trivial E pos (Maybe.None Item) (List.Nil Item))
  )

def Parsec.plus (S E A: Type) (x y: Parsec S E A): Parsec S E A =
  λ B s1 eok eer cok cer => x B s1
    eok
    (λ s2 xe => y B s1
      eok
      (λ s3 ye => eer (State.longestMatch S E s2 s3) (Error.merge E xe ye))
      cok
      (λ s3 ye => cer (State.longestMatch S E s2 s3) (Error.merge E xe ye))
    )
    cok
    cer

def Parsec.choice (S E A: Type) (ps: List (Parsec S E A)): Parsec S E A =
  (case ps) (λ _ => Parsec S E A)
    (Parsec.zero S E A)
    (λ p ps => Parsec.plus S E A p (Parsec.choice S E A ps))

def Parsec.eof (S E: Type): Parsec S E Unit = λ B s1 eok eer cok cer =>
  (case s1) (λ _ => B) (λ pos input err ste =>
    (case input) (λ _ => B)
      (eok s1 Unit.New)
      (λ c cs => eer s1 (Error.Trivial E pos
        (Maybe.Some Item (Item.Tokens (Text.single c)))
        (List.single Item Item.Eof)
        )
      )
  )

def Parsec.fail (S E A: Type) (msg: Text): Parsec S E A = λ B s1 eok eer cok cer =>
  (case s1) (λ _ => B) (λ pos txt errs ste =>
    eer s1 (Error.Fancy E pos (List.single (Fancy E) (Fancy.Fail E msg)))
  )

def Parsec.try (S E A: Type) (p: Parsec S E A): Parsec S E A =
  λ B s1 eok eer cok cer => p B s1
    eok (λ s2 e => eer s1 e) cok (λ s2 e => eer s1 e)

def Parsec.label (S E A: Type) (msg: Text) (p: Parsec S E A): Parsec S E A =
  λ B s1 eok eer cok cer => p B s1
    eok
    (λ s2 e => (case e) (λ _ => B)
      (λ pos unx exp => eer s2
        (Error.Trivial E pos unx (List.single Item (Item.Label msg)))
      )
      (λ _ _ => eer s2 e)
    )
    cok
    cer

def Parsec.make (S E A: Type) (f: ∀ (State S E) -> Reply S E A): Parsec S E A =
  λ B s1 eok eer cok cer => (case (f s1)) (λ _ => B) eok eer cok cer

def Parsec.optional (S E A: Type) (p: Parsec S E A): Parsec S E (Maybe A) =
  Parsec.plus S E (Maybe A)
    (Parsec.map S E A (Maybe A) (Maybe.Some A) p)
    (Parsec.pure S E (Maybe A) (Maybe.None A))

def Parsec.many (S E A: Type) (p: Parsec S E A): Parsec S E (List A) =
  Parsec.bind S E (Maybe A) (List A)
    (Parsec.optional S E A p)
    (λ x => (case x) (λ _ => Parsec S E (List A))
      (Parsec.pure S E (List A) (List.Nil A))
      (λ a => Parsec.map S E (List A) (List A) (List.Cons A a) 
        (Parsec.many S E A p))
    )

def Parsec.take (S E: Type) (err: Text) (n: Nat): Parsec S E Text =
  λ B s1 eok eer cok cer => (case s1) (λ _ => B) (λ pos inp errs ste =>
    (case (Nat.gth n (Text.lenChars inp))) (λ _ => B)
      (eer s1 (Error.Trivial E pos (Maybe.Some Item Item.Eof)
        (List.single Item (Item.Label err)))
      )
      ((case (Text.split n inp)) (λ _ => B) (λ took rest =>
      cok (State.New S E (Nat.add n pos) rest errs ste) took
      ))
  )

def Parsec.manyTill (S E A B: Type) (p: Parsec S E A) (end: Parsec S E B)
  : Parsec S E (List A)
  = Parsec.plus S E (List A)
  (Parsec.bind S E B (List A) end (λ _ => Parsec.pure S E (List A) (List.Nil A)))
  (Parsec.bind S E A (List A) p (λ x =>
  (Parsec.bind S E (List A) (List A) (Parsec.manyTill S E A B p end) (λ xs => 
  (Parsec.pure S E (List A) (List.Cons A x xs))))))

def Parsec.observing (S E A: Type) (p: Parsec S E A): Parsec S E (Either (Error E) A)
  = λ B s1 eok eer cok cer => p B s1
  (λ s2 x => eok s2 (Either.Right (Error E) A x))
  (λ s2 e => eok s2 (Either.Left (Error E) A e))
  (λ s2 x => cok s2 (Either.Right (Error E) A x))
  (λ s2 e => cok s2 (Either.Left (Error E) A e))

def Parsec.peek (S E A: Type) (p: Parsec S E A): Parsec S E A = 
  λ B s1 eok eer cok cer => p B s1
  (λ s2 a => eok s1 a)
  eer
  (λ s2 a => cok s1 a)
  cer

