package Bool where

def Bool: Type = #Bool

def true: Bool = #Bool.true
def false: Bool = #Bool.false

def eql: ∀ (x y: Bool) -> Bool = #Bool.eql
def lte: ∀ (x y: Bool) -> Bool = #Bool.lte
def lth: ∀ (x y: Bool) -> Bool = #Bool.lth
def gte: ∀ (x y: Bool) -> Bool = #Bool.gte
def gth: ∀ (x y: Bool) -> Bool = #Bool.gth


def and: ∀ (x y: Bool) -> Bool = #Bool.and
def or:  ∀ (x y: Bool) -> Bool = #Bool.or
def xor: ∀ (x y: Bool) -> Bool = #Bool.xor

def not: ∀ (x: Bool) -> Bool = #Bool.not

def neq (x y: Bool): Bool = not (eql x y)

def if (A: Type) (bool : Bool) (t: A) (f: A): A = (case bool) (λ _ => A) t f

