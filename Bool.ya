package Bool where

def Bool : Type =
  @self ∀
  (0 P     : ∀ Bool -> Type)
  (& true  : P (data λ P t f => t))
  (& false : P (data λ P t f => f))
  -> P self

def true  : Bool = data λ P t f => t
def false : Bool = data λ P t f => f

def and (a b: Bool): Bool = (case a) (\_ => Bool) ((case b) (\_ => Bool) true false) false
def or  (a b: Bool): Bool = (case a) (\_ => Bool) true ((case b) (\_ => Bool) true false)
def not (a  : Bool): Bool = (case a) (\_ => Bool) false true
def xor (a b: Bool): Bool = (case a) (\_ => Bool) (not b) b



