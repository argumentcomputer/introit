// This package is an adaptation of the Haskell Megaparsec library found at
// https://hackage.haskell.org/package/megaparsec
package Parser
  import Unit as Unit
  import Unit (Unit)
  import Either as Either
  import Either (Either)
  import Char as Char
  import Char (Char)
  import List as List
  import List (List)
  import Maybe as Maybe
  import Maybe (Maybe)
  import Nat as Nat
  import Nat (Nat)
  import Text as Text
  import Text (Text)
  import Parsec.State as Parsec.State
  import Parsec.Reply as Parsec.Reply
  import Parsec.Error as Parsec.Error
  import Parsec.Error (Item)
  import Parsec as Parsec
  import Parsec (Parsec)
where

def Parser (A: Type): Type = Parsec Unit Unit A

def State: Type = Parsec.State.State Unit Unit
def Error: Type = Parsec.Error.Error Unit
def Reply (A: Type): Type = Parsec.Reply.Reply Unit Unit A

def State.new (pos: Nat) (txt: Text) (errs: List Error): State 
  = Parsec.State.new Unit Unit pos txt errs Unit.new

def State.init (txt: Text): State = Parsec.State.initial Unit Unit txt Unit.new

def run (A: Type) (parser: Parser A) (state: State): Reply A
  = Parsec.run Unit Unit A parser state

def parse (A: Type) (parser: Parser A) (txt: Text): Either Error A
  = Parsec.parse Unit Unit A parser (State.init txt)

def Parsed (A: Type) (reply: Reply A): Type =
  (case reply) (λ _ => Type)
  (λ _ _ => A)
  (λ _ _ => Error)
  (λ _ _ => A)
  (λ _ _ => Error)

def parsed (A: Type) (parser: Parser A) (txt: Text)
  : Parsed A (run A parser (State.init txt))
  = (case (run A parser (State.init txt))) (λ reply => Parsed A reply)
    (λ _ x => x)
    (λ _ e => e)
    (λ _ x => x)
    (λ _ e => e)

def pure (A: Type) (a: A): Parser A = Parsec.pure Unit Unit A a

def bind (A B: Type) (p: Parser A) (f: ∀ A -> Parser B): Parser B = 
  Parsec.bind Unit Unit A B p f

def ap (A B: Type) (pf: Parser (∀ A -> B)) (pa: Parser A): Parser B =
  Parsec.ap Unit Unit A B pf pa

def state: Parser State = Parsec.state Unit Unit

def token (A: Type) (f: ∀ Char -> Maybe A) (exps: List Item): Parser A
  = Parsec.token Unit Unit A f exps

def anyChar: Parser Char = Parsec.anyChar Unit Unit

def char (c: Char): Parser Char = Parsec.char Unit Unit c

def optional (A: Type) (p: Parser A): Parser (Maybe A)
  = Parsec.optional Unit Unit A p

def many (A: Type) (p: Parser A): Parser (List A) = Parsec.many Unit Unit A p

def take (err: Text) (n: Nat): Parser Text = Parsec.take Unit Unit err n
