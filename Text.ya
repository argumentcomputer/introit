package Text
  import Bool (Bool)
  import Bool as Bool
  import Is (Is)
  import Is as Is
  import Char (Char)
  import Char as Char
  import Nat (Nat)
  import Nat as Nat
  import Maybe (Maybe)
  import Maybe as Maybe
  import U8 (U8)
where


def Text: Type = #Text

def nil: Text = ""
def cons: ∀ Char Text -> Text = #Text.cons

def lenChars: ∀ Text -> Nat = #Text.len_chars
def lenBytes: ∀ Text -> Nat = #Text.len_bytes
def lenLines: ∀ Text -> Nat = #Text.len_lines

def append: ∀ Text Text -> Text = #Text.append
def insert: ∀ Nat Text Text -> Text = #Text.insert
def remove: ∀ Nat Nat Text -> Text = #Text.remove

def take: ∀ Nat Text -> Text = #Text.take
def drop: ∀ Nat Text -> Text = #Text.drop

def eql: ∀ Text Text -> Bool = #Text.eql
def lte: ∀ Text Text -> Bool = #Text.lte
def lth: ∀ Text Text -> Bool = #Text.lth
def gte: ∀ Text Text -> Bool = #Text.gte
def gth: ∀ Text Text -> Bool = #Text.gth

def neq (x y: Text): Bool = Bool.not (eql x y)

def char (idx: Nat) (txt: Text): Maybe Char =
  (case (Nat.lth idx (lenChars txt))) (λ _ => Maybe Char)
    (Maybe.some Char (#Text.char idx txt))
    (Maybe.none Char)

def charSafe (idx: Nat) (txt: Text) (0 e: Is (Nat.lth idx (lenChars txt))): Char
  = #Text.char idx txt

def byte (idx: Nat) (txt: Text): Maybe U8 =
  (case (Nat.lth idx (lenBytes txt))) (λ _ => Maybe U8)
    (Maybe.some U8 (#Text.byte idx txt))
    (Maybe.none U8)

def byteSafe (idx: Nat) (txt: Text) (0 e: Is (Nat.lth idx (lenBytes txt))): U8
  = #Text.byte idx txt

def line (idx: Nat) (txt: Text): Maybe Text =
  (case (Nat.lth idx (lenLines txt))) (λ _ => Maybe Text)
    (Maybe.some Text (#Text.line idx txt))
    (Maybe.none Text)

def lineSafe (idx: Nat) (txt: Text) (0 e: Is (Nat.lth idx (lenLines txt))): Text
  = #Text.line idx txt

def charAtByte (idx: Nat) (txt: Text): Maybe Nat =
  (case (Nat.lth idx (lenBytes txt))) (λ _ => Maybe Nat)
    (Maybe.some Nat (#Text.char_at_byte idx txt))
    (Maybe.none Nat)

def charAtByteSafe
  (idx: Nat)
  (txt: Text)
  (0 e: Is (Nat.lth idx (lenBytes txt)))
  : Nat
  = #Text.char_at_byte idx txt

def byteAtChar (idx: Nat) (txt: Text): Maybe Nat =
  (case (Nat.lth idx (lenChars txt))) (λ _ => Maybe Nat)
    (Maybe.some Nat (#Text.byte_at_char idx txt))
    (Maybe.none Nat)

def byteAtCharSafe (i: Nat) (x: Text) (0 e: Is (Nat.lth i (lenChars x))): Nat
  = #Text.byte_at_char i x

def lineAtChar (idx: Nat) (txt: Text): Maybe Nat =
  (case (Nat.lth idx (lenChars txt))) (λ _ => Maybe Nat)
    (Maybe.some Nat (#Text.line_at_char idx txt))
    (Maybe.none Nat)

def lineAtCharSafe (i: Nat) (x: Text) (0 e: Is (Nat.lth i (lenChars x))): Nat
  = #Text.line_at_char i x

def lineAtByte (idx: Nat) (txt: Text): Maybe Nat =
  (case (Nat.lth idx (lenBytes txt))) (λ _ => Maybe Nat)
    (Maybe.some Nat (#Text.line_at_byte idx txt))
    (Maybe.none Nat)

def lineAtByteSafe (i: Nat) (x: Text) (0 e: Is (Nat.lth i (lenBytes x))): Nat
  = #Text.line_at_byte i x

def lineStartChar (idx: Nat) (txt: Text): Maybe Nat =
  (case (Nat.lth idx (lenLines txt))) (λ _ => Maybe Nat)
    (Maybe.some Nat (#Text.line_start_char idx txt))
    (Maybe.none Nat)

def lineStartCharSafe (i: Nat) (x: Text) (0 e: Is (Nat.lth i (lenLines x))): Nat
  = #Text.line_start_char i x

def lineStartByte (idx: Nat) (txt: Text): Maybe Nat =
  (case (Nat.lth idx (lenLines txt))) (λ _ => Maybe Nat)
    (Maybe.some Nat (#Text.line_start_byte idx txt))
    (Maybe.none Nat)

def lineStartByteSafe (i: Nat) (x: Text) (0 e: Is (Nat.lth i (lenLines x))): Nat
  = #Text.line_start_byte i x
