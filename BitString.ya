package BitString where

def BitString : Type
  = @self ∀
  (0 P : ∀ BitString -> Type)
  (& be: P (data λ P be b0 b1 => be))
  (& b0: ∀ (pred: BitString) -> P (data λ P be b0 b1 => b0 pred))
  (& b1: ∀ (pred: BitString) -> P (data λ P be b0 b1 => b1 pred))
  -> P self

def be : BitString = data λ P be b0 b1 => be
def b0 (pred : BitString) : BitString = data λ P be b0 b1 => b0 pred
def b1 (pred : BitString) : BitString = data λ P be b0 b1 => b1 pred

def concat (x: BitString) (y: BitString) : BitString =
  (case x) (λ _ => BitString) y (λ xs => b0 (concat xs y)) (λ xs => b1 (concat xs y))

def inc (a: BitString) : BitString
  = (case a) (λ _ => BitString) (b1 be) (λ xs => b1 xs) (λ xs => b0 (inc xs))

def add (x: BitString) (y: BitString): BitString =
  (case y) (λ _ => BitString) x
    (λ ys => (case x) (λ _ => BitString) y
      (λ xs => b0 (add xs ys))
      (λ xs => b1 (add xs ys)))
    (λ ys => (case x) (λ _ => BitString) y
      (λ xs => b1 (add xs ys))
      (λ xs => b0 (add (inc xs) ys)))
