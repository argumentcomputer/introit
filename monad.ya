package monad where

type Monad (M: ∀ Type -> Type) {
  New
    (pure: ∀ (A: Type) A -> M A)
    (bind: ∀ (A B: Type) (M A) (∀ A -> (M B)) -> M B),
}

def bind
  (0 M: ∀ Type -> Type)
  (impl: Monad M)
  (A: Type)
  (B: Type)
  (m: M A)
  (f: ∀ A -> (M B))
  : M B
  = (case impl) (λ _ => M B) (λ  _ bind => bind A B m f)

def pure (0 M: ∀ Type -> Type) (impl: Monad M) (A: Type) (a: A): M A =
  (case impl) (λ _ => M A) (λ pure _ => pure A a)


