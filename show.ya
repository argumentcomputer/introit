package show 
  import text
where

type Show (A: Type) {
  New (show: ∀ A -> Text)
}

//def show (0 A: Type) (impl: Show A) (x: A): #Text
//  = (case impl) (λ _ => #Text)
//        (λ show_a => show_a x)

//def stringShow: Show #Text
//  = newShow #Text (λ s => #cat "\"" (#cat s "\""))
//
//def base64 : List #Char =
//    (List.cons #Char '0' (List.cons #Char '1' (List.cons #Char '2' (List.cons #Char '3' (List.cons #Char '4' (List.cons #Char '5'
//    (List.cons #Char '6' (List.cons #Char '7' (List.cons #Char '8' (List.cons #Char '9' (List.cons #Char 'A' (List.cons #Char 'B'
//    (List.cons #Char 'C' (List.cons #Char 'D' (List.cons #Char 'E' (List.cons #Char 'F' (List.cons #Char 'G' (List.cons #Char 'H'
//    (List.cons #Char 'I' (List.cons #Char 'J' (List.cons #Char 'K' (List.cons #Char 'L' (List.cons #Char 'M' (List.cons #Char 'N'
//    (List.nil #Char)))))))))))))))))))))))))
//
//    (List.cons #Char 'O' (List.cons #Char 'P' (List.cons #Char 'Q' (List.cons #Char 'R' (List.cons #Char 'S' (List.cons #Char 'T'
//    (List.cons #Char 'U' (List.cons #Char 'V' (List.cons #Char 'W' (List.cons #Char 'X' (List.cons #Char 'Y' (List.cons #Char 'Z'
//    (List.cons #Char 'a' (List.cons #Char 'b' (List.cons #Char 'c' (List.cons #Char 'd' (List.cons #Char 'e' (List.cons #Char 'f'
//    (List.cons #Char 'g' (List.cons #Char 'h' (List.cons #Char 'i' (List.cons #Char 'j' (List.cons #Char 'k' (List.cons #Char 'l'
//    (List.cons #Char 'm' (List.cons #Char 'n' (List.cons #Char 'o' (List.cons #Char 'p' (List.cons #Char 'q' (List.cons #Char 'r'
//    (List.cons #Char 's' (List.cons #Char 't' (List.cons #Char 'u' (List.cons #Char 'v' (List.cons #Char 'w' (List.cons #Char 'x'
//    (List.cons #Char 'y' (List.cons #Char 'z' (List.cons #Char '+' (List.cons #Char '/' (List.nil #Char))))
//    )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
//
//
//def showDigit (base n : Nat): #Text
//  =
//  let m : Nat = mod n base;
//  #Text.cons
//    (if #Char
//        (and (gtn base (from_natural 0)) (lte base (from_natural 64)))
//        (Maybe.default #Char (List.at #Char base64 m) '#')
//        '#'
//    )
//    ""
//
//def toBase (base : Nat) (n : Nat): List Nat
//  = letrec fun : (forall Nat Nat (List Nat) -> List Nat) =
//        (λ base n list => (case (divMod n base)) (λ _ => List Nat)
//            (λ div mod =>
//                let l : List Nat = List.cons Nat mod list;
//                (case div) (λ _ => List Nat)
//                    l
//                    (λ _ => fun base div l)
//            )
//        );
//    fun base n (List.nil Nat)
//
//def toStringOfBase (base : Nat) (n : Nat): #Text
//  = let digits : List Nat = toBase base n;
//  List.foldr Nat #Text (λ digit str => #Text.concat str (showDigit (from_natural 10) digit)) "" digits
//
//def natShow: Show Nat
//  = newShow Nat (toStringOfBase (from_natural 10))
//
//
//def deriveMaybeShow (A : Type) (impl : Show A): Show (Maybe A)
//  = newShow (Maybe A)
//        (λ m =>
//            (case m) (λ _ => #Text)
//                "none"
//                (λ a => #Text.concat "just " (show A impl a))
//        )
//
//def deriveListShow (A : Type) (impl : Show A): Show (List A)
//  = let subShow : forall A #Text -> #Text = (λ a str =>
//        #Text.concat str (#Text.concat ", " (show A impl a))
//    );
//  newShow (List A)
//        (λ list =>
//            #Text.concat "List ["
//            (#Text.concat ((case list) (λ _ => #Text)
//                ""
//                (λ head tail => List.foldr A #Text subShow (show A impl head) list)
//                )
//            "]")
//        )
//
//def derivePairShow (A B : Type) (implA : Show A) (implB : Show B): Show (Pair A B)
//  = newShow (Pair A B)
//        (λ p =>
//            (case p) (λ _ => #Text)
//                (λ a b => #Text.concat "("
//                    (#Text.concat (show A implA a)
//                    (#Text.concat ", " (#Text.concat (show B implB b) ")")))
//                )
//        )
//
//def deriveMapShow (K V : Type) (ord : Ordered K) (implK : Show K) (implV : Show V): Show (Map K V ord)
//  =
//  letrec pairShow : ∀ (Pair K V) -> #Text = (λ p =>
//    #Text.concat (show K implK (Pair.fst K V p))
//    (#Text.concat " => " (show V implV (Pair.snd K V p)))
//  );
//  letrec subShow : ∀ (Pair K V) #Text -> #Text = (λ p str =>
//        #Text.concat str (#Text.concat ", " (pairShow p))
//    );
//  newShow (Map K V ord)
//        (λ m =>
//            let list : List (Pair K V) = Map.toList K V ord m;
//            #Text.concat "Map {"
//            (#Text.concat ((case list) (λ _ => #Text)
//                ""
//                (λ head tail => List.foldr (Pair K V) #Text subShow (pairShow head) tail)
//                )
//            "}")
//        )
//
//def deriveVectorShow (0 A : Type) (size : Nat) (impl : Show A): Show (Vector A size) =
//  letrec showIt : ∀ A -> #Text = show A impl;
//  let subShow : forall A #Text -> #Text = (λ a str =>
//        #Text.concat str (#Text.concat ", " (showIt a))
//    );
//  newShow (Vector A size)
//        (λ vec =>
//            #Text.concat "Vector ("
//            (#Text.concat (show Nat natShow size)
//            (#Text.concat ") ["
//            (#Text.concat ((case vec) (λ _ _ => #Text)
//                    ""
//                    (λ size head tail => Vector.foldr A #Text size subShow (showIt head) tail))
//                "]")))
//        )
