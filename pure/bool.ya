package bool where


type Bool {
  True,
  False,
}

def and (a: Bool) (b: Bool): Bool =
  (case a) (λ _ => Bool) ((case b) (λ _ => Bool) Bool.True Bool.False) Bool.False

def or (a: Bool) (b: Bool): Bool =
  (case a) (λ _ => Bool) Bool.True ((case b) (λ _ => Bool) Bool.True Bool.False)

def not (a: Bool): Bool = (case a) (λ _ => Bool) Bool.False Bool.True

def xor (a: Bool) (b: Bool): Bool =
  (case a) (λ _ => Bool) (not b) b

def if (A : Type) (bool : Bool) (a1: A) (a2: A) : A
  = (case bool) (λ _ => A) a1 a2

