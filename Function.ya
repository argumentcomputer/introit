package Function where

def Function (A: Type) (B: ∀ A -> Type): Type = ∀ (x: A) -> B x

def const (0 A: Type) (0 B: Type) (x: A) (y: B): A = x

def id (0 A: Type) (x: A): A = x

def compose (0 A: Type) (0 B: Type) (0 C: Type) (g: ∀ B -> C) (f: ∀ A -> B): ∀ A -> C
  = λ x => g (f x)

def call (0 A: Type) (0 B: ∀ A -> Type) (x: A) (f: ∀ (a:A) -> B a) : B x
  = f x

def composeD
  (0 A: Type)
  (0 B: ∀ A -> Type)
  (0 C: ∀ (a: A) (B a) -> Type)
  (x: A)
  (f: ∀ (a: A)  -> B a)
  (g: ∀ (b : B x) -> C x (f x))
  : C x (f x)
  = g (f x)

